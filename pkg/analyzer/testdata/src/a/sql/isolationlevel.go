// Code generated by usestdlibvars, DO NOT EDIT.

package sql_test

import "fmt"

var (
	_ = "Read Committed"   // want `"Read Committed" can be replaced by sql\.LevelReadCommitted\.String\(\)`
	_ = "Read Uncommitted" // want `"Read Uncommitted" can be replaced by sql\.LevelReadUncommitted\.String\(\)`
	_ = "Repeatable Read"  // want `"Repeatable Read" can be replaced by sql\.LevelRepeatableRead\.String\(\)`
	_ = "Write Committed"  // want `"Write Committed" can be replaced by sql\.LevelWriteCommitted\.String\(\)`
)

const (
	_ = "Read Committed"   // want `"Read Committed" can be replaced by sql\.LevelReadCommitted\.String\(\)`
	_ = "Read Uncommitted" // want `"Read Uncommitted" can be replaced by sql\.LevelReadUncommitted\.String\(\)`
	_ = "Repeatable Read"  // want `"Repeatable Read" can be replaced by sql\.LevelRepeatableRead\.String\(\)`
	_ = "Write Committed"  // want `"Write Committed" can be replaced by sql\.LevelWriteCommitted\.String\(\)`
)

func _() {
	_ = func(s string) string { return s }("Read Committed") // want `"Read Committed" can be replaced by sql\.LevelReadCommitted\.String\(\)`
	_ = func(s string) string { return s }("text before key Read Committed")
	_ = func(s string) string { return s }("Read Committed text after key")
	_ = func(s string) string { return s }("Read Uncommitted") // want `"Read Uncommitted" can be replaced by sql\.LevelReadUncommitted\.String\(\)`
	_ = func(s string) string { return s }("text before key Read Uncommitted")
	_ = func(s string) string { return s }("Read Uncommitted text after key")
	_ = func(s string) string { return s }("Repeatable Read") // want `"Repeatable Read" can be replaced by sql\.LevelRepeatableRead\.String\(\)`
	_ = func(s string) string { return s }("text before key Repeatable Read")
	_ = func(s string) string { return s }("Repeatable Read text after key")
	_ = func(s string) string { return s }("Write Committed") // want `"Write Committed" can be replaced by sql\.LevelWriteCommitted\.String\(\)`
	_ = func(s string) string { return s }("text before key Write Committed")
	_ = func(s string) string { return s }("Write Committed text after key")
}

func _() {
	_ = fmt.Sprint("Read Committed") // want `"Read Committed" can be replaced by sql\.LevelReadCommitted\.String\(\)`
	_ = fmt.Sprint("text before key Read Committed")
	_ = fmt.Sprint("Read Committed text after key")
	_ = fmt.Sprint("Read Uncommitted") // want `"Read Uncommitted" can be replaced by sql\.LevelReadUncommitted\.String\(\)`
	_ = fmt.Sprint("text before key Read Uncommitted")
	_ = fmt.Sprint("Read Uncommitted text after key")
	_ = fmt.Sprint("Repeatable Read") // want `"Repeatable Read" can be replaced by sql\.LevelRepeatableRead\.String\(\)`
	_ = fmt.Sprint("text before key Repeatable Read")
	_ = fmt.Sprint("Repeatable Read text after key")
	_ = fmt.Sprint("Write Committed") // want `"Write Committed" can be replaced by sql\.LevelWriteCommitted\.String\(\)`
	_ = fmt.Sprint("text before key Write Committed")
	_ = fmt.Sprint("Write Committed text after key")
}
